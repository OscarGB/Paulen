;D: main
;D: {
;D: int
;R: modificadores_acceso: 
;R: tipo: TOK_INT
;R: clase_escalar: tipo
;R: clase: clase_escalar
;D: x1
;R: identificador: TOK_IDENTIFICADOR
;D: ,
;D: x2
;R: identificador: TOK_IDENTIFICADOR
;D: ;
;R: identificadores: TOK_IDENTIFICADOR
;R: identificadores: TOK_IDENTIFICADOR ',' identificadores
;R: declaracion: modificadores_acceso clase identificadores ';'
;D: boolean
;R: modificadores_acceso: 
;R: tipo: TOK_BOOLEAN
;R: clase_escalar: tipo
;R: clase: clase_escalar
;D: y1
;R: identificador: TOK_IDENTIFICADOR
;D: ;
;R: identificadores: TOK_IDENTIFICADOR
;R: declaracion: modificadores_acceso clase identificadores ';'
;D: scanf
;R: declaraciones: declaracion
;R: declaraciones: declaracion declaraciones
;R: funciones: 
;D: x1
;D: ;
;R: lectura: TOK_SCANF TOK_IDENTIFICADOR
;R: sentencia_simple: lectura
;R: sentencia: sentencia_simple ';'
;D: scanf
;D: x2
;D: ;
;R: lectura: TOK_SCANF TOK_IDENTIFICADOR
;R: sentencia_simple: lectura
;R: sentencia: sentencia_simple ';'
;D: scanf
;D: y1
;D: ;
;R: lectura: TOK_SCANF TOK_IDENTIFICADOR
;R: sentencia_simple: lectura
;R: sentencia: sentencia_simple ';'
;D: if
;D: (
;D: (
;D: x1
;D: ==
;R: exp: TOK_IDENTIFICADOR
;D: x2
;D: )
;R: exp: TOK_IDENTIFICADOR
;R: comparacion: exp TOK_IGUAL exp
;R: exp: '(' comparacion ')'
;D: )
;D: {
;R: if_exp: TOK_IF '(' exp ')' '{'
;D: if
;D: (
;D: y1
;D: )
;R: exp: TOK_IDENTIFICADOR
;D: {
;R: if_exp: TOK_IF '(' exp ')' '{'
;D: printf
;D: 110
;R: constante_entera: TOK_CONSTANTE_ENTERA
;R: constante: constante_entera
;R: exp: constante
;D: ;
;R: escritura: TOK_PRINTF exp
;R: sentencia_simple: escritura
;R: sentencia: sentencia_simple ';'
;D: }
;R: sentencias: sentencia
;R: if_exp_sentencias: if_exp sentencias '}'
;D: else
;D: {
;D: printf
;D: 111
;R: constante_entera: TOK_CONSTANTE_ENTERA
;R: constante: constante_entera
;R: exp: constante
;D: ;
;R: escritura: TOK_PRINTF exp
;R: sentencia_simple: escritura
;R: sentencia: sentencia_simple ';'
;D: }
;R: sentencias: sentencia
;R: condicional: if_exp_sentencias TOK_ELSE '{' sentencias '}'
;R: bloque: condicional
;R: sentencia: bloque
;D: }
;R: sentencias: sentencia
;R: if_exp_sentencias: if_exp sentencias '}'
;D: else
;D: {
;D: if
;D: (
;D: y1
;D: )
;R: exp: TOK_IDENTIFICADOR
;D: {
;R: if_exp: TOK_IF '(' exp ')' '{'
;D: printf
;D: 10
;R: constante_entera: TOK_CONSTANTE_ENTERA
;R: constante: constante_entera
;R: exp: constante
;D: ;
;R: escritura: TOK_PRINTF exp
;R: sentencia_simple: escritura
;R: sentencia: sentencia_simple ';'
;D: }
;R: sentencias: sentencia
;R: if_exp_sentencias: if_exp sentencias '}'
;D: else
;D: {
;D: printf
;D: 11
;R: constante_entera: TOK_CONSTANTE_ENTERA
;R: constante: constante_entera
;R: exp: constante
;D: ;
;R: escritura: TOK_PRINTF exp
;R: sentencia_simple: escritura
;R: sentencia: sentencia_simple ';'
;D: }
;R: sentencias: sentencia
;R: condicional: if_exp_sentencias TOK_ELSE '{' sentencias '}'
;R: bloque: condicional
;R: sentencia: bloque
;D: }
;R: sentencias: sentencia
;R: condicional: if_exp_sentencias TOK_ELSE '{' sentencias '}'
;R: bloque: condicional
;R: sentencia: bloque
;D: }
;R: sentencias: sentencia
;R: sentencias: sentencia sentencias
;R: sentencias: sentencia sentencias
;R: sentencias: sentencia sentencias
;R: programa: TOK_MAIN '{' declaraciones funciones sentencias '}'
