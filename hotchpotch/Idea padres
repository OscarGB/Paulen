get_padres(*c_padres, size(padres)){   					# D y E
	TODOS_LOS_PADRES = array(strings)					# Lista donde vamos guardando los padres del nuevo nodo

	Padres_de_padres([[]])								# Lista de listas (inicialmente vacia)


	if (c_padres == empty) return []
-------------------------------------------
	for elem in lista enlazada:
		if(c_padres vacio Y padres_de_padres vacio){	# c_padres es NULL en todas sus posiciones y 
			return TODOS_LOS_PADRES + [NULL]			# padres_de_padres es null en todas sus posiciones
		}
	-----------------------------------
		if(elem es null){
			ERROR
		}
-------------------------------
		si elem esta en c_padres:
			eliminar elem de c_padres
			aÃ±adir la lista de padres de elem a  Padres_de_padres
			aÃ±adir elem a TODOS_LOS_PADRES
			continue;
		flag = false;

		-------------------------
		for l in padres_de_padres:
			si elem es primer elemento de l:
				l++ (es un puntero)
				flag = true

		if flag == true:
			aÃ±adir elem a TODOS_LOS_PADRES

}

padres = malloc(npadres * (size(*char)))
c_padres
nveces:
	padres(i) = malloc (strlen(nombre) * size(char))
	c=padres(i)

get_padres() -> cpadres va a estar vacia
